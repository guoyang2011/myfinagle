package cn.changhong.web

import java.nio.charset.Charset
import com.twitter.finagle.http.Response
import net.liftweb.json.Extraction._
import net.liftweb.json._
import org.jboss.netty.buffer.{ChannelBuffers, ChannelBuffer}
import org.jboss.netty.handler.codec.http.HttpMethod
import org.jboss.netty.util.CharsetUtil

/**
 * Created by yangguo on 14-12-8.
 */
object util {
  implicit class ChRegex(sc:StringContext) {
      def r = new scala.util.matching.Regex(sc.parts.mkString, sc.parts.tail.map(_ => "x"): _*)
  }
}
object ResponseCode{
  // 请求成功
  val succeed = 0
  // 不匹配任何账户
  val User_not_exit = -1
  //你的账号存在安全问题,已暂时被冻结
  val login_user_freeze = -2
  // 没有权限调用此接口
  val no_right_call_this_Method = -3
  //调用接口不存在
  val no_such_method = -4
  //此方法不支持Http访问，请使用Https访问
  val request_method_not_support = -5
  //用户没有授予某权限
  val permission_need = -6
  // 你的账号已经停止使用
  val login_user_banned = -7
  // 验证请求参数失败
  val Invalid_authorization_parameters = -8
  //用户已经注销
  val login_user_suicide = -9
  //接口被禁用或者服务器故障被临时关闭
  val method_was_closed = -10
  //没有权限调用此接口
  val no_right_call_this_method_deeper = -11
  // 对方设置了权限，你暂时无法查看此内容
  val no_right = -12
  //上传文件不能大于8M
  val upload_file_size_exceed_limit = -13
  //请不要频繁调用接口，你调用次数超过限制
  val App_over_invocation_limit = -14
  //解析请求参数失败
  val invalid_request_parameters = -15
  //时间戳过期
  val expired_timestamp = -16
  // 随机码不唯一
  val already_user_nonce = -17
  //无效的签名
  val invalid_signature = -18
  //access token 无效
  val invalid_token = -19
  //access token 过期
  val expired_token = -20
  //服务器运行超时,请稍后重试
  val service_execution_timeout = -21
  //服务器内部错误
  val service_inline_cause = -22
}
trait CHResponse
case class ResponseContent[V](var status:Int,var content:V) extends CHResponse
object DefaultResponseEncoder{
  def createInvalidRequestParamsResponse():Response={
    val content=ResponseContent(ResponseCode.invalid_request_parameters,Some("Invalid Request Parameters!"))
    createResponseEncoderContent(content)
  }
  def createAuthModelSuccessResponse():Response={
    val content=ResponseContent(ResponseCode.succeed,Some("Ok"))
    createResponseEncoderContent(content)
  }
  def createResponseEncoderContent[T](t:T):Response={
    createResponse(transferObjToChBuffer(t))
  }
  def createInvalidTokenResponse():Response={
    val content=ResponseContent(ResponseCode.invalid_token,Some("Invalid Token!"))
    createResponse(transferObjToChBuffer(content))
  }
  def createExpiredTimestampResponse():Response={
    val content=ResponseContent(ResponseCode.expired_timestamp,Some("Expired AccessToken Timestamp!"))
    createResponse(transferObjToChBuffer(content))
  }
  def createNoAuthResponse():Response={
    val content=ResponseContent(ResponseCode.request_method_not_support,Some("Not Auth Use This Method!"))
    createResponse(transferObjToChBuffer(content))
  }
  def createResponse(content:ChannelBuffer,code:Int=200,header:Option[Map[String,String]]=None):Response={
    val response=Response()
    response.setStatusCode(code)
    if(header.isDefined) header.get foreach{kv=>response.setHeader(kv._1,kv._2)}
    response.setContent(content)
    response
  }
  def createNoResourceFindResponse():Response={
    val content=ResponseContent(ResponseCode.no_such_method,Some("Request Service Is Not Find!"))
    createResponse(transferObjToChBuffer(content))
  }
  private[this] implicit val format = DefaultFormats
  def transferObjToJsonStr[T](t:T):String={
    compact(render(decompose(t)))
  }
  def transferStringToMap(params: String): Map[String, Any] = {
    parse(params).values.asInstanceOf[Map[String, Any]]
  }
  def transferByteBufToMap(content: ChannelBuffer, charset: java.nio.charset.Charset = CharsetUtil.UTF_8): Map[String, Any] = {
    transferStringToMap(transferByteBufToString(content, charset))
  }
  def transferObjToChBuffer[T](t:T,charset:Charset=CharsetUtil.UTF_8):ChannelBuffer={
    ChannelBuffers.copiedBuffer(transferObjToJsonStr(t),charset)
  }
  def transferByteBufToString(content: ChannelBuffer, charset: java.nio.charset.Charset = CharsetUtil.UTF_8): String = {
    val buffer =
      if (content.hasArray) content.array()
      else {
        val tBuffer = new Array[Byte](content.readableBytes())
        content.readBytes(tBuffer)
        tBuffer
      }
    new String(buffer, charset)
  }
}

object DefaultRequestDecoder{

}