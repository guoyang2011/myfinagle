/**
 * Generated by Scrooge
 *   version: 3.14.1
 *   rev: a996c1128a032845c508102d62e65fc0aa7a5f41
 *   built at: 20140501-114733
 */
package cn.changhong.core

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object NewsModel extends ThriftStructCodec3[NewsModel] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("NewsModel")
  val IdField = new TField("id", TType.I32, 1)
  val IdFieldManifest = implicitly[Manifest[Int]]
  val TitleField = new TField("title", TType.STRING, 2)
  val TitleFieldManifest = implicitly[Manifest[String]]
  val ContentField = new TField("content", TType.STRING, 3)
  val ContentFieldManifest = implicitly[Manifest[String]]
  val MediaFromField = new TField("media_from", TType.STRING, 4)
  val MediaFromFieldManifest = implicitly[Manifest[String]]
  val AuthorField = new TField("author", TType.STRING, 5)
  val AuthorFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      false,
      IdFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      TitleField,
      false,
      TitleFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      ContentField,
      false,
      ContentFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      MediaFromField,
      false,
      MediaFromFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      AuthorField,
      false,
      AuthorFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: NewsModel) {
  }

  override def encode(_item: NewsModel, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): NewsModel = {
    var id: Int = 0
    var title: String = null
    var content: String = null
    var mediaFrom: String = null
    var author: String = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 => {
                id = readIdValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.I32
            
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING => {
                title = readTitleValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'title' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING => {
                content = readContentValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'content' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING => {
                mediaFrom = readMediaFromValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'mediaFrom' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING => {
                author = readAuthorValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'author' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      id,
      title,
      content,
      mediaFrom,
      author,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    id: Int,
    title: String,
    content: String,
    mediaFrom: String,
    author: String
  ): NewsModel =
    new Immutable(
      id,
      title,
      content,
      mediaFrom,
      author
    )

  def unapply(_item: NewsModel): Option[scala.Product5[Int, String, String, String, String]] = Some(_item)


  private def readIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  private def writeIdField(id_item: Int, _oprot: TProtocol) {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeIdValue(id_item: Int, _oprot: TProtocol) {
    _oprot.writeI32(id_item)
  }

  private def readTitleValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeTitleField(title_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(TitleField)
    writeTitleValue(title_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeTitleValue(title_item: String, _oprot: TProtocol) {
    _oprot.writeString(title_item)
  }

  private def readContentValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeContentField(content_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(ContentField)
    writeContentValue(content_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeContentValue(content_item: String, _oprot: TProtocol) {
    _oprot.writeString(content_item)
  }

  private def readMediaFromValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeMediaFromField(mediaFrom_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(MediaFromField)
    writeMediaFromValue(mediaFrom_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeMediaFromValue(mediaFrom_item: String, _oprot: TProtocol) {
    _oprot.writeString(mediaFrom_item)
  }

  private def readAuthorValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeAuthorField(author_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(AuthorField)
    writeAuthorValue(author_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAuthorValue(author_item: String, _oprot: TProtocol) {
    _oprot.writeString(author_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[NewsModel] {
    override def encode(_item: NewsModel, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): NewsModel = NewsModel.decode(_iprot)
  }

  /**
   * The default read-only implementation of NewsModel.  You typically should not need to
   * directly reference this class; instead, use the NewsModel.apply method to construct
   * new instances.
   */
  class Immutable(
    val id: Int,
    val title: String,
    val content: String,
    val mediaFrom: String,
    val author: String,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends NewsModel {
    def this(
      id: Int,
      title: String,
      content: String,
      mediaFrom: String,
      author: String
    ) = this(
      id,
      title,
      content,
      mediaFrom,
      author,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the NewsModel trait with additional state or
   * behavior and implement the read-only methods from NewsModel using an underlying
   * instance.
   */
  trait Proxy extends NewsModel {
    protected def _underlying_NewsModel: NewsModel
    override def id: Int = _underlying_NewsModel.id
    override def title: String = _underlying_NewsModel.title
    override def content: String = _underlying_NewsModel.content
    override def mediaFrom: String = _underlying_NewsModel.mediaFrom
    override def author: String = _underlying_NewsModel.author
    override def _passthroughFields = _underlying_NewsModel._passthroughFields
  }
}

trait NewsModel
  extends ThriftStruct
  with scala.Product5[Int, String, String, String, String]
  with java.io.Serializable
{
  import NewsModel._

  def id: Int
  def title: String
  def content: String
  def mediaFrom: String
  def author: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = id
  def _2 = title
  def _3 = content
  def _4 = mediaFrom
  def _5 = author

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (true) {
              writeIdValue(id, _oprot)
              Some(NewsModel.IdField)
            } else {
              None
            }
          case 2 =>
            if (title ne null) {
              writeTitleValue(title, _oprot)
              Some(NewsModel.TitleField)
            } else {
              None
            }
          case 3 =>
            if (content ne null) {
              writeContentValue(content, _oprot)
              Some(NewsModel.ContentField)
            } else {
              None
            }
          case 4 =>
            if (mediaFrom ne null) {
              writeMediaFromValue(mediaFrom, _oprot)
              Some(NewsModel.MediaFromField)
            } else {
              None
            }
          case 5 =>
            if (author ne null) {
              writeAuthorValue(author, _oprot)
              Some(NewsModel.AuthorField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): NewsModel = {
    var id: Int = this.id
    var title: String = this.title
    var content: String = this.content
    var mediaFrom: String = this.mediaFrom
    var author: String = this.author
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = readIdValue(_blob.read)
      case 2 =>
        title = readTitleValue(_blob.read)
      case 3 =>
        content = readContentValue(_blob.read)
      case 4 =>
        mediaFrom = readMediaFromValue(_blob.read)
      case 5 =>
        author = readAuthorValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      title,
      content,
      mediaFrom,
      author,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): NewsModel = {
    var id: Int = this.id
    var title: String = this.title
    var content: String = this.content
    var mediaFrom: String = this.mediaFrom
    var author: String = this.author

    _fieldId match {
      case 1 =>
        id = 0
      case 2 =>
        title = null
      case 3 =>
        content = null
      case 4 =>
        mediaFrom = null
      case 5 =>
        author = null
      case _ =>
    }
    new Immutable(
      id,
      title,
      content,
      mediaFrom,
      author,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetId: NewsModel = unsetField(1)

  def unsetTitle: NewsModel = unsetField(2)

  def unsetContent: NewsModel = unsetField(3)

  def unsetMediaFrom: NewsModel = unsetField(4)

  def unsetAuthor: NewsModel = unsetField(5)


  override def write(_oprot: TProtocol) {
    NewsModel.validate(this)
    _oprot.writeStructBegin(Struct)
    writeIdField(id, _oprot)
    if (title ne null) writeTitleField(title, _oprot)
    if (content ne null) writeContentField(content, _oprot)
    if (mediaFrom ne null) writeMediaFromField(mediaFrom, _oprot)
    if (author ne null) writeAuthorField(author, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: Int = this.id,
    title: String = this.title,
    content: String = this.content,
    mediaFrom: String = this.mediaFrom,
    author: String = this.author,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): NewsModel =
    new Immutable(
      id,
      title,
      content,
      mediaFrom,
      author,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[NewsModel]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[NewsModel]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.title
    case 2 => this.content
    case 3 => this.mediaFrom
    case 4 => this.author
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "NewsModel"
}