/**
 * Generated by Scrooge
 *   version: 3.14.1
 *   rev: a996c1128a032845c508102d62e65fc0aa7a5f41
 *   built at: 20140501-114733
 */
package cn.changhong.core.thrift

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object User extends ThriftStructCodec3[User] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("User")
  val IdField = new TField("id", TType.I64, 1)
  val IdFieldManifest = implicitly[Manifest[Long]]
  val UsernameField = new TField("username", TType.STRING, 2)
  val UsernameFieldManifest = implicitly[Manifest[String]]
  val IphoneField = new TField("iphone", TType.STRING, 3)
  val IphoneFieldManifest = implicitly[Manifest[String]]
  val EmailField = new TField("email", TType.STRING, 4)
  val EmailFieldManifest = implicitly[Manifest[String]]
  val PasswdField = new TField("passwd", TType.STRING, 5)
  val PasswdFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      false,
      IdFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      UsernameField,
      false,
      UsernameFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      IphoneField,
      false,
      IphoneFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      EmailField,
      false,
      EmailFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      PasswdField,
      false,
      PasswdFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: User) {
  }

  override def encode(_item: User, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): User = {
    var id: Long = 0L
    var username: String = null
    var iphone: String = null
    var email: String = null
    var passwd: String = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 => {
                id = readIdValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.I64
            
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING => {
                username = readUsernameValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING => {
                iphone = readIphoneValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'iphone' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING => {
                email = readEmailValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'email' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING => {
                passwd = readPasswdValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'passwd' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      id,
      username,
      iphone,
      email,
      passwd,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    id: Long,
    username: String,
    iphone: String,
    email: String,
    passwd: String
  ): User =
    new Immutable(
      id,
      username,
      iphone,
      email,
      passwd
    )

  def unapply(_item: User): Option[scala.Product5[Long, String, String, String, String]] = Some(_item)


  private def readIdValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  private def writeIdField(id_item: Long, _oprot: TProtocol) {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeIdValue(id_item: Long, _oprot: TProtocol) {
    _oprot.writeI64(id_item)
  }

  private def readUsernameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeUsernameField(username_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(UsernameField)
    writeUsernameValue(username_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeUsernameValue(username_item: String, _oprot: TProtocol) {
    _oprot.writeString(username_item)
  }

  private def readIphoneValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeIphoneField(iphone_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(IphoneField)
    writeIphoneValue(iphone_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeIphoneValue(iphone_item: String, _oprot: TProtocol) {
    _oprot.writeString(iphone_item)
  }

  private def readEmailValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeEmailField(email_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(EmailField)
    writeEmailValue(email_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeEmailValue(email_item: String, _oprot: TProtocol) {
    _oprot.writeString(email_item)
  }

  private def readPasswdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writePasswdField(passwd_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(PasswdField)
    writePasswdValue(passwd_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writePasswdValue(passwd_item: String, _oprot: TProtocol) {
    _oprot.writeString(passwd_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[User] {
    override def encode(_item: User, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): User = User.decode(_iprot)
  }

  /**
   * The default read-only implementation of User.  You typically should not need to
   * directly reference this class; instead, use the User.apply method to construct
   * new instances.
   */
  class Immutable(
    val id: Long,
    val username: String,
    val iphone: String,
    val email: String,
    val passwd: String,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends User {
    def this(
      id: Long,
      username: String,
      iphone: String,
      email: String,
      passwd: String
    ) = this(
      id,
      username,
      iphone,
      email,
      passwd,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the User trait with additional state or
   * behavior and implement the read-only methods from User using an underlying
   * instance.
   */
  trait Proxy extends User {
    protected def _underlying_User: User
    override def id: Long = _underlying_User.id
    override def username: String = _underlying_User.username
    override def iphone: String = _underlying_User.iphone
    override def email: String = _underlying_User.email
    override def passwd: String = _underlying_User.passwd
    override def _passthroughFields = _underlying_User._passthroughFields
  }
}

trait User
  extends ThriftStruct
  with scala.Product5[Long, String, String, String, String]
  with java.io.Serializable
{
  import User._

  def id: Long
  def username: String
  def iphone: String
  def email: String
  def passwd: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = id
  def _2 = username
  def _3 = iphone
  def _4 = email
  def _5 = passwd

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (true) {
              writeIdValue(id, _oprot)
              Some(User.IdField)
            } else {
              None
            }
          case 2 =>
            if (username ne null) {
              writeUsernameValue(username, _oprot)
              Some(User.UsernameField)
            } else {
              None
            }
          case 3 =>
            if (iphone ne null) {
              writeIphoneValue(iphone, _oprot)
              Some(User.IphoneField)
            } else {
              None
            }
          case 4 =>
            if (email ne null) {
              writeEmailValue(email, _oprot)
              Some(User.EmailField)
            } else {
              None
            }
          case 5 =>
            if (passwd ne null) {
              writePasswdValue(passwd, _oprot)
              Some(User.PasswdField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): User = {
    var id: Long = this.id
    var username: String = this.username
    var iphone: String = this.iphone
    var email: String = this.email
    var passwd: String = this.passwd
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = readIdValue(_blob.read)
      case 2 =>
        username = readUsernameValue(_blob.read)
      case 3 =>
        iphone = readIphoneValue(_blob.read)
      case 4 =>
        email = readEmailValue(_blob.read)
      case 5 =>
        passwd = readPasswdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      username,
      iphone,
      email,
      passwd,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): User = {
    var id: Long = this.id
    var username: String = this.username
    var iphone: String = this.iphone
    var email: String = this.email
    var passwd: String = this.passwd

    _fieldId match {
      case 1 =>
        id = 0L
      case 2 =>
        username = null
      case 3 =>
        iphone = null
      case 4 =>
        email = null
      case 5 =>
        passwd = null
      case _ =>
    }
    new Immutable(
      id,
      username,
      iphone,
      email,
      passwd,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetId: User = unsetField(1)

  def unsetUsername: User = unsetField(2)

  def unsetIphone: User = unsetField(3)

  def unsetEmail: User = unsetField(4)

  def unsetPasswd: User = unsetField(5)


  override def write(_oprot: TProtocol) {
    User.validate(this)
    _oprot.writeStructBegin(Struct)
    writeIdField(id, _oprot)
    if (username ne null) writeUsernameField(username, _oprot)
    if (iphone ne null) writeIphoneField(iphone, _oprot)
    if (email ne null) writeEmailField(email, _oprot)
    if (passwd ne null) writePasswdField(passwd, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: Long = this.id,
    username: String = this.username,
    iphone: String = this.iphone,
    email: String = this.email,
    passwd: String = this.passwd,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): User =
    new Immutable(
      id,
      username,
      iphone,
      email,
      passwd,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[User]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[User]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.username
    case 2 => this.iphone
    case 3 => this.email
    case 4 => this.passwd
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "User"
}